# i3status configuration file.
# see "man i3status" for documentation.

# It is important that this file is edited as UTF-8.
# The following line should contain a sharp s:
# ß
# If the above line is not correctly displayed, fix your editor first!

general {
        colors = true
        interval = 5
        color_none = 'FFFFFF'
        markup = "pango"
        interval = 1
}

order += "keyboard_locks"
order += "ipv6"
order += "wireless _first_"
order += "ethernet _first_"
order += "path_exists VPN"
order += "volume master"
order += "read_file bri"
order += "battery all"
order += "load"
#order += "cpu_usage"
order += "read_file governor"
order += "cpu_temperature 0"
#order += "read_file fan"
order += "lm_sensors"
order += "memory"
order += "disk /"
order += "tztime local"
order += "read_file uptime"

keyboard_locks {
    format =  '[\?if=num_lock&color=good NUM|\?color=bad NUM] '
    format += '[\?if=caps_lock&color=good CAPS|\?color=bad CAPS] '
}

wireless _first_ {
        format_up = "  %quality, %bitrate, %ip"
        format_down = "  down"
}

ethernet _first_ {
        format_up = "  %ip (%speed)"
        format_down = "  down"
}

path_exists VPN {
        # path exists when a VPN tunnel launched by nmcli/nm-applet is active
        path = "/proc/sys/net/ipv4/conf/ppp0"
        format = "VPN"
}

volume master {
   format = "  %volume"
   format_muted = "  %volume"
   device = "default"
   mixer = "Master"
   mixer_idx = 0
}

read_file bri {
        format = "<span color='#FFFFFF'>  %content/255</span>"
        path = "/sys/class/backlight/amdgpu_bl0/brightness"
}

battery all {
        format = "%status %percentage %remaining"
        format_down = "No battery"
        status_chr = " "
        status_bat = " "
        status_unk = "? UNK"
        status_full = " "
        path = "/sys/class/power_supply/BAT%d/uevent"
        low_threshold = 20
        threshold_type = percentage
}

disk "/" {
        format = "  %avail"
}

load {
        format = "  %1min"
        format_above_threshold = "  %1min %5min %15min"
        max_threshold = "8"

        on_click 1 = "exec --no-startup-id kitty -T='CPU Monitor' watch -n1 'sudo cpupower monitor'"
        on_click 2 = "exec --no-startup-id kitty -T='CPU Monitor Full' watch -n1 'sudo cpupower monitor && echo && top -b -n 1'"
        on_click 3 = "exec /home/josh/scripts/closecpumon.sh"
}

cpu_usage {
        format = "  %usage"
        max_threshold = 90
        degraded_threshold = 50
}

cpu_temperature 0 {
        format = " %degrees °C"
        path = "/sys/devices/platform/thinkpad_hwmon/hwmon/hwmon*/temp1_input"
}

memory {
        format = "  %available %used"
        threshold_degraded = "10G"
        format_degraded = "  < %available"
}

tztime local {
        format = "%Y-%m-%d %H:%M:%S"
}

read_file uptime {
        path = "/proc/uptime"
        format = "<span color='#FFFFFF'>%content</span>"
}

read_file fan {
        format = "<span color='#FFFFFF'>  %content RPM</span>"
        path = "/sys/devices/platform/thinkpad_hwmon/hwmon/hwmon3/fan1_input"
        
}

read_file governor {
        format = "<span color='#FFFFFF'>  %content</span>"
        path = "/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor"
        on_click 1 = "exec sudo cpupower frequency-set -g performance" 
        on_click 2 = "exec sudo cpupower frequency-set -g ondemand"
        on_click 3 = "exec sudo cpupower frequency-set -g powersave"
}

lm_sensors {
        chips = ['thinkpad-isa-0000']
        sensors = ['fan1']
        #format_chip = '[\?if=name=thinkpad-isa-0000 CPU]'
        format_chip = '{format_sensor}'
        #format_sensor = '[\?if=name=fan1 ]'
        format_sensor = '[  {input} RPM]'

}
